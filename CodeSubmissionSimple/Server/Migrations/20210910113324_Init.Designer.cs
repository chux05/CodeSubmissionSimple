// <auto-generated />
using CodeSubmissionSimple.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CodeSubmissionSimple.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210910113324_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CodeSubmissionSimple.Shared.Candidate", b =>
                {
                    b.Property<int>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CandidateId");

                    b.HasIndex("SubmissionId")
                        .IsUnique();

                    b.ToTable("Candidates");

                    b.HasData(
                        new
                        {
                            CandidateId = 1,
                            Email = "chux05@hotmail.com",
                            Name = "Promise",
                            SubmissionId = 1,
                            Surname = "Email"
                        });
                });

            modelBuilder.Entity("CodeSubmissionSimple.Shared.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeStub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Langauge")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            CodeStub = "def reverse_string():",
                            Description = "Given a string x, reverse and return it",
                            Langauge = "Python"
                        },
                        new
                        {
                            QuestionId = 2,
                            CodeStub = "\r\n            public class Solution{\r\n                public int LastIndexOfOne(string S) {\r\n                \r\n                    return 0;  \r\n                }\r\n            }",
                            Description = "Given a string S consisting only '0's and '1's,  find the last index of the '1' present in it.",
                            Langauge = "C#"
                        },
                        new
                        {
                            QuestionId = 3,
                            CodeStub = "",
                            Description = "Given a database 'Users', write a query to display all the users",
                            Langauge = "SQL"
                        },
                        new
                        {
                            QuestionId = 4,
                            CodeStub = "",
                            Description = "Given a piece of html, change the text to be red using the 'red-card class\r\n<div id=\"firstDiv\" class=\"red-card\">",
                            Langauge = "CSS"
                        },
                        new
                        {
                            QuestionId = 5,
                            CodeStub = "",
                            Description = "Given a piece of html, change the text to be pink using Javascript\r\n<div id=\"firstDiv\">",
                            Langauge = "JavaScript"
                        },
                        new
                        {
                            QuestionId = 6,
                            CodeStub = "function toCelsius(fahrenheit) {\r\n}",
                            Description = "Given a farenheit variable, convert it to Celcius ",
                            Langauge = "JavaScript"
                        },
                        new
                        {
                            QuestionId = 7,
                            CodeStub = "\r\n            public class Solution{\r\n                public int[] MergeArrays(int[] nums1, int[]nums2) {\r\n          \r\n                }\r\n            }",
                            Description = "Merge two sorted arrays and return it as a single array.",
                            Langauge = "C#"
                        });
                });

            modelBuilder.Entity("CodeSubmissionSimple.Shared.Submission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("isCompleted")
                        .HasColumnType("bit");

                    b.HasKey("SubmissionId");

                    b.ToTable("Submissions");

                    b.HasData(
                        new
                        {
                            SubmissionId = 1,
                            isCompleted = false
                        });
                });

            modelBuilder.Entity("CodeSubmissionSimple.Shared.TestStatus", b =>
                {
                    b.Property<int>("TestStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.HasKey("TestStatusId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("TestStatuses");

                    b.HasData(
                        new
                        {
                            TestStatusId = 1,
                            QuestionId = 1,
                            SubmissionId = 1
                        },
                        new
                        {
                            TestStatusId = 2,
                            QuestionId = 2,
                            SubmissionId = 1
                        },
                        new
                        {
                            TestStatusId = 3,
                            QuestionId = 6,
                            SubmissionId = 1
                        });
                });

            modelBuilder.Entity("CodeSubmissionSimple.Shared.Candidate", b =>
                {
                    b.HasOne("CodeSubmissionSimple.Shared.Submission", "Submission")
                        .WithOne("Candidate")
                        .HasForeignKey("CodeSubmissionSimple.Shared.Candidate", "SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("CodeSubmissionSimple.Shared.TestStatus", b =>
                {
                    b.HasOne("CodeSubmissionSimple.Shared.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeSubmissionSimple.Shared.Submission", "Submission")
                        .WithMany("Answers")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("CodeSubmissionSimple.Shared.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("CodeSubmissionSimple.Shared.Submission", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Candidate");
                });
#pragma warning restore 612, 618
        }
    }
}
