@page "/"
@using CodeSubmissionSimple.Client.Services
@using CodeSubmissionSimple.Shared
@inject HttpClient Http


<style>
    * {
        font-family: Karla, 'sans-serif';
    }

    .main-wrapper {

        width: 100%;
        height: 100vh;
        display: flex;
        flex-wrap: wrap;
        background-color: #b0bec5;
        border-radius: 5px;
    }
    

    .question-wrapper {
        width: 95%;
        height: 25%;
        margin: auto;
        background-color: #808e95;
        border-radius: 1px solid #333;
        border-radius: 5px;
        display: flex;
        justify-content: space-evenly;
        align-items: center;
    }

    .code-wrapper {
        width: 95%;
        height: 65%;
        margin: auto;
        background-color: #808e95;
        border-radius: 1px solid #333;
        border-radius: 5px;
        display: flex;
        flex-direction: column;
    }
@* 
    .questions-list {
        width: 25%;
        height: 25%;
        margin: auto;
        background-color: #00897b;
        border-radius: 1px solid #333;
        border-radius: 5px;
        display: flex;
        align-items: center;
    } *@

    @* .output-wrapper {
        width: 25%;
        height: 65%;
        margin: auto;
        background-color: #00897b;
        border-radius: 1px solid #333;
        border-radius: 5px;
        display: flex;
        flex-direction: column;
    } *@

    .prev-btn {
        margin: 0 2%;
    }

    .next-btn {
        margin: 0 2%;
    }

    .question {
        width: 70%;
        margin: auto;
        height: 80%;
        border: 1px solid #333;
        background-color: #fff;
        padding: 10px;
        border-radius: 5px;
    }

    .btn-container {
        width:90%;
        height:15%;        
        display:flex;
        justify-content: flex-end;
        align-items: center;
        margin: auto;
    }

    .run-btn {
         margin-right: 5px;
    }

    .submit-btn {
       
    }

    .code {
        width: 90%;
        margin: auto;
        height: 70%;
        border: 1px solid #333;
        background-color: #fff;
        padding: 10px;
        border-radius: 5px;
    }

    @* .title{

        width:90%;
        height:15%;               
        margin: auto;
    }

    .output{

        width: 90%;
        margin: auto;
        height: 70%;
        border: 1px solid #333;
        background-color: #fff;
        padding: 10px;
        border-radius: 5px;
    } *@

    @* .list{

        width: 70%;
        margin: auto;
        height: 80%;
        border: 1px solid #333;
        background-color: #fff;
        padding: 10px;
        border-radius: 5px;
    } *@

    textarea{
        width: 100%;
        height: 100%;
        border:none;
        outline: none;
    }

    .q-title{
        font-weight: bold;
        font-size: 18px;
    }

</style>

<h3>Xebec - Testing Environment</h3>


<div class="main-wrapper">

    <div class="question-wrapper">

        <button class="prev-btn btn btn-primary" @onclick="Previous">Prev</button>

        <div class="question">

            @if (Quests != null)
            {
                <br>
                @if (Quests.Count > counter)
                {
                    <p class="q-title">Question ( @(Quests[counter].Question.Langauge)):</p>
                    <p>
                     @(Quests[counter].Question.Description)
                    </p>
                }

            }

        </div>

        <button class="next-btn btn btn-success" @onclick="Next">Next</button>

    </div>
@* 
    <div class="questions-list">

        <div class="list"></div>

    </div> *@

    <div class="code-wrapper">

        <div class="btn-container">
            <button class="run-btn btn btn-primary">Run</button>
            <button class="submit-btn btn btn-success" @onclick="Submit">Submit</button>
        </div>


        <div class="code">
            @if (Quests != null)
            {
                <textarea @bind="TempCode" rows="15"></textarea>
            }
        </div>


    </div>

    @* <div class="output-wrapper">

        <div class="title">
            <h3>Sample</h3>
        </div>
        <div class="output"></div>

    </div> *@

</div>


@* <div class="container-fluid wrapper">

    <!--code editor-->
    <div class="left">

    @if (Quests != null)
    {
    <textarea @bind="TempCode" rows="15"></textarea>
    }

    </div>

    <!--Question-->
    <div class="border-left right">

    @if (Quests != null)
    {
    <br>
    @if (Quests.Count > counter)
    {
    <p><h4>Question:</h4> <br />@(Quests[counter].Question.Description)</p>
    }

    }
    </div>
    </div>

    <!--Button Container-->
    <div class="row bottom">
    <div class="col-sm-8 buttons btn-container">

    @if (counter > 0)
    {
    <button id="prev" type="button" class="btn btn-primary btn-lg" @onclick="Previous">Prev</button>
    }
    @if (counter < Length - 1)
    {
    <button id="next" type="button" class="btn btn-primary btn-lg btn-success" @onclick="Next">Next</button>
    }
    else
    {
    <button id="submit" type="button" class="btn btn-primary btn-lg btn-success" @onclick="Submit">Submit Your Code</button>
    }
    </div>

    </div> *@

@code {
    [Inject]
    ISubmisstionDataService _sClient { get; set; }

    private Submission submission;
    List<TestStatus> Quests { get; set; }

    string TempCode { get; set; } = "";

    int counter { get; set; } = 0;
    int Length { get; set; } = 0;
    protected override async Task OnInitializedAsync()
    {
        //gets the submission model from the ID num
        submission = await Http.GetFromJsonAsync<Submission>($"api/Submission/1");

        if (submission != null)
        {
            Quests = submission.Answers;
            counter = 0;
            Length = Quests.Count();
            setStub(counter);
        }
        else
        {
            // need to do
        }
    }

    private void setStub(int counter)
    {

        if (counter > 0 || counter < Length)
        {
            if (string.IsNullOrEmpty(Quests[counter].Code))
            {
                TempCode = Quests[counter].Question.CodeStub;
            }
            else
            {
                TempCode = Quests[counter].Code;
            }

        }
    }

    private void Previous()
    {
        Quests[counter].Code = TempCode;
        if (counter > 0)
        {
            --counter;
        }
        setStub(counter);
    }
    private void Next()
    {
        Quests[counter].Code = TempCode;
        if (counter < Length)
        {
            ++counter;
        }
        setStub(counter);
    }
    private async Task Submit()
    {
        Quests[counter].Code = TempCode;
        submission.isCompleted = true;
        await _sClient.UpdateSubmission(submission);
        TempCode = "Updated";
    }
}
